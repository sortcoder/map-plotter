{"ast":null,"code":"/**\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at.\r\n *\r\n *      Http://www.apache.org/licenses/LICENSE-2.0.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\r\n * dynamically using\r\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\r\n * It works by dynamically creating and appending a script node to the the\r\n * document head and wrapping the callback function so as to return a promise.\r\n *\r\n * ```\r\n * const loader = new Loader({\r\n *   apiKey: \"\",\r\n *   version: \"weekly\",\r\n *   libraries: [\"places\"]\r\n * });\r\n *\r\n * loader.load().then(() => {\r\n *   const map = new google.maps.Map(...)\r\n * })\r\n * ```\r\n */\nvar Loader = /** @class */function () {\n  /**\r\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\r\n   * using this library, instead the defaults are set by the Google Maps\r\n   * JavaScript API server.\r\n   *\r\n   * ```\r\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\r\n   * ```\r\n   */\n  function Loader(_a) {\n    var apiKey = _a.apiKey,\n      channel = _a.channel,\n      _b = _a.id,\n      id = _b === void 0 ? \"__googleMapsScriptId\" : _b,\n      _c = _a.libraries,\n      libraries = _c === void 0 ? [] : _c,\n      language = _a.language,\n      region = _a.region,\n      version = _a.version,\n      mapIds = _a.mapIds,\n      nonce = _a.nonce,\n      _d = _a.url,\n      url = _d === void 0 ? \"https://maps.googleapis.com/maps/api/js\" : _d;\n    this.CALLBACK = \"__googleMapsCallback\";\n    this.callbacks = [];\n    this.done = false;\n    this.loading = false;\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.id = id;\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.url = url;\n  }\n  /**\r\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\r\n   *\r\n   * @ignore\r\n   */\n  Loader.prototype.createUrl = function () {\n    var url = this.url;\n    url += \"?callback=\" + this.CALLBACK;\n    if (this.apiKey) {\n      url += \"&key=\" + this.apiKey;\n    }\n    if (this.channel) {\n      url += \"&channel=\" + this.channel;\n    }\n    if (this.libraries.length > 0) {\n      url += \"&libraries=\" + this.libraries.join(\",\");\n    }\n    if (this.language) {\n      url += \"&language=\" + this.language;\n    }\n    if (this.region) {\n      url += \"&region=\" + this.region;\n    }\n    if (this.version) {\n      url += \"&v=\" + this.version;\n    }\n    if (this.mapIds) {\n      url += \"&map_ids=\" + this.mapIds.join(\",\");\n    }\n    return url;\n  };\n  /**\r\n   * Load the Google Maps JavaScript API script and return a Promise.\r\n   */\n  Loader.prototype.load = function () {\n    return this.loadPromise();\n  };\n  /**\r\n   * Load the Google Maps JavaScript API script and return a Promise.\r\n   *\r\n   * @ignore\r\n   */\n  Loader.prototype.loadPromise = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.loadCallback(function (err) {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n  /**\r\n   * Load the Google Maps JavaScript API script with a callback.\r\n   */\n  Loader.prototype.loadCallback = function (fn) {\n    this.callbacks.push(fn);\n    this.execute();\n  };\n  /**\r\n   * Set the script on document.\r\n   */\n  Loader.prototype.setScript = function () {\n    if (this.id && document.getElementById(this.id)) {\n      this.callback();\n      return;\n    }\n    var url = this.createUrl();\n    var script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n    document.head.appendChild(script);\n  };\n  Loader.prototype.loadErrorCallback = function (e) {\n    this.onerrorEvent = e;\n    this.callback();\n  };\n  Loader.prototype.setCallback = function () {\n    window.__googleMapsCallback = this.callback.bind(this);\n  };\n  Loader.prototype.callback = function () {\n    var _this = this;\n    this.done = true;\n    this.loading = false;\n    this.callbacks.forEach(function (cb) {\n      cb(_this.onerrorEvent);\n    });\n    this.callbacks = [];\n  };\n  Loader.prototype.execute = function () {\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) ;else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  };\n  return Loader;\n}();\nexport { Loader };","map":{"version":3,"names":["Loader","_a","apiKey","channel","_b","id","_c","libraries","language","region","version","mapIds","nonce","_d","url","CALLBACK","callbacks","done","loading","prototype","createUrl","length","join","load","loadPromise","_this","Promise","resolve","reject","loadCallback","err","fn","push","execute","setScript","document","getElementById","callback","script","createElement","type","src","onerror","loadErrorCallback","bind","defer","async","head","appendChild","e","onerrorEvent","setCallback","window","__googleMapsCallback","forEach","cb"],"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @ignore\n */\ndeclare global {\n  interface Window {\n    __googleMapsCallback: (e: Event) => void;\n  }\n}\n\ntype Libraries = (\n  | \"drawing\"\n  | \"geometry\"\n  | \"localContext\"\n  | \"places\"\n  | \"visualization\"\n)[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * To track usage across different applications using the same client ID,\n   * you may provide an optional channel parameter with your requests. By\n   * specifying different channel values for different aspects of your\n   * application, you can determine precisely how your application is used.\n   *\n   * For example, your externally-facing website may access the API using a\n   * channel set to customer while your internal marketing department may use\n   * a channel set to mkting. Your reports will break down usage by those\n   * channel values.\n   *\n   * Channel reporting is available for applications using the Maps JavaScript\n   * API, the image APIs or any of the Google Maps Platform web services.\n   *\n   * The channel parameter must use the following format:\n   *\n   * - Must be an ASCII alphanumeric string.\n   * - Period (.), underscore (_) and hyphen (-) characters are allowed.\n   * - The channel parameter is case-insensitive; upper-case, mixed-case, and\n   *   lower-cased channel parameters will be merged into their lower-case\n   *   equivalent. For example, usage on the `CUSTOMER` channel will be combined\n   *   with the usage on the `customer` channel.\n   * - The channel value must be a static value assigned per application\n   *   instance, and must not be generated dynamically. You may not use\n   *   channel values to track individual users, for example.\n   */\n  channel?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to the United\n   * Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * (Beta) You can add multiple Map IDs to your map using the map_ids paramenter in\n   * your bootstrap request.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then(() => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  apiKey: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  channel: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  url: string;\n\n  private CALLBACK = \"__googleMapsCallback\";\n  private callbacks: ((e: Event) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: Event;\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    channel,\n    id = \"__googleMapsScriptId\",\n    libraries = [],\n    language,\n    region,\n    version,\n    mapIds,\n    nonce,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n  }: LoaderOptions) {\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.id = id;\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.url = url;\n  }\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   */\n  createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=${this.CALLBACK}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   */\n  load(): Promise<void> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   */\n  loadPromise(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: Event) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   */\n  loadCallback(fn: (e: Event) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (this.id && document.getElementById(this.id)) {\n      this.callback();\n      return;\n    }\n\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  }\n\n  private loadErrorCallback(e: Event): void {\n    this.onerrorEvent = e;\n    this.callback();\n  }\n\n  private setCallback(): void {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgFE,SAAAA,OAAYC,EAWI;QAVdC,MAAM,GAAAD,EAAA,CAAAC,MAAA;MACNC,OAAO,GAAAF,EAAA,CAAAE,OAAA;MACPC,EAAA,GAAAH,EAAA,CAAAI,EAA2B;MAA3BA,EAAE,GAAAD,EAAA,cAAG,sBAAsB,GAAAA,EAAA;MAC3BE,EAAA,GAAAL,EAAA,CAAAM,SAAc;MAAdA,SAAS,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;MACdE,QAAQ,GAAAP,EAAA,CAAAO,QAAA;MACRC,MAAM,GAAAR,EAAA,CAAAQ,MAAA;MACNC,OAAO,GAAAT,EAAA,CAAAS,OAAA;MACPC,MAAM,GAAAV,EAAA,CAAAU,MAAA;MACNC,KAAK,GAAAX,EAAA,CAAAW,KAAA;MACLC,EAAA,GAAAZ,EAAA,CAAAa,GAA+C;MAA/CA,GAAG,GAAAD,EAAA,cAAG,yCAAyC,GAAAA,EAAA;IAzBzC,KAAAE,QAAQ,GAAG,sBAAsB;IACjC,KAAAC,SAAS,GAA2B,EAAE;IACtC,KAAAC,IAAI,GAAG,KAAK;IACZ,KAAAC,OAAO,GAAG,KAAK;IAwBrB,IAAI,CAACR,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,GAAG,GAAGA,GAAG;;;;;;;EAOhBd,MAAA,CAAAmB,SAAA,CAAAC,SAAS,GAAT;IACE,IAAIN,GAAG,GAAG,IAAI,CAACA,GAAG;IAElBA,GAAG,IAAI,eAAa,IAAI,CAACC,QAAU;IAEnC,IAAI,IAAI,CAACb,MAAM,EAAE;MACfY,GAAG,IAAI,UAAQ,IAAI,CAACZ,MAAQ;;IAG9B,IAAI,IAAI,CAACC,OAAO,EAAE;MAChBW,GAAG,IAAI,cAAY,IAAI,CAACX,OAAS;;IAGnC,IAAI,IAAI,CAACI,SAAS,CAACc,MAAM,GAAG,CAAC,EAAE;MAC7BP,GAAG,IAAI,gBAAc,IAAI,CAACP,SAAS,CAACe,IAAI,CAAC,GAAG,CAAG;;IAGjD,IAAI,IAAI,CAACd,QAAQ,EAAE;MACjBM,GAAG,IAAI,eAAa,IAAI,CAACN,QAAU;;IAGrC,IAAI,IAAI,CAACC,MAAM,EAAE;MACfK,GAAG,IAAI,aAAW,IAAI,CAACL,MAAQ;;IAGjC,IAAI,IAAI,CAACC,OAAO,EAAE;MAChBI,GAAG,IAAI,QAAM,IAAI,CAACJ,OAAS;;IAG7B,IAAI,IAAI,CAACC,MAAM,EAAE;MACfG,GAAG,IAAI,cAAY,IAAI,CAACH,MAAM,CAACW,IAAI,CAAC,GAAG,CAAG;;IAG5C,OAAOR,GAAG;GACX;;;;EAKDd,MAAA,CAAAmB,SAAA,CAAAI,IAAI,GAAJ;IACE,OAAO,IAAI,CAACC,WAAW,EAAE;GAC1B;;;;;;EAODxB,MAAA,CAAAmB,SAAA,CAAAK,WAAW,GAAX;IAAA,IAAAC,KAAA;IACE,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;MACjCH,KAAI,CAACI,YAAY,CAAC,UAACC,GAAU;QAC3B,IAAI,CAACA,GAAG,EAAE;UACRH,OAAO,EAAE;SACV,MAAM;UACLC,MAAM,CAACE,GAAG,CAAC;;OAEd,CAAC;KACH,CAAC;GACH;;;;EAKD9B,MAAA,CAAAmB,SAAA,CAAAU,YAAY,GAAZ,UAAaE,EAAsB;IACjC,IAAI,CAACf,SAAS,CAACgB,IAAI,CAACD,EAAE,CAAC;IACvB,IAAI,CAACE,OAAO,EAAE;GACf;;;;EAKOjC,MAAA,CAAAmB,SAAA,CAAAe,SAAS,GAAjB;IACE,IAAI,IAAI,CAAC7B,EAAE,IAAI8B,QAAQ,CAACC,cAAc,CAAC,IAAI,CAAC/B,EAAE,CAAC,EAAE;MAC/C,IAAI,CAACgC,QAAQ,EAAE;MACf;;IAGF,IAAMvB,GAAG,GAAG,IAAI,CAACM,SAAS,EAAE;IAC5B,IAAMkB,MAAM,GAAGH,QAAQ,CAACI,aAAa,CAAC,QAAQ,CAAC;IAC/CD,MAAM,CAACjC,EAAE,GAAG,IAAI,CAACA,EAAE;IACnBiC,MAAM,CAACE,IAAI,GAAG,iBAAiB;IAC/BF,MAAM,CAACG,GAAG,GAAG3B,GAAG;IAChBwB,MAAM,CAACI,OAAO,GAAG,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;IAClDN,MAAM,CAACO,KAAK,GAAG,IAAI;IACnBP,MAAM,CAACQ,KAAK,GAAG,IAAI;IAEnB,IAAI,IAAI,CAAClC,KAAK,EAAE;MACd0B,MAAM,CAAC1B,KAAK,GAAG,IAAI,CAACA,KAAK;;IAG3BuB,QAAQ,CAACY,IAAI,CAACC,WAAW,CAACV,MAAM,CAAC;GAClC;EAEOtC,MAAA,CAAAmB,SAAA,CAAAwB,iBAAiB,GAAzB,UAA0BM,CAAQ;IAChC,IAAI,CAACC,YAAY,GAAGD,CAAC;IACrB,IAAI,CAACZ,QAAQ,EAAE;GAChB;EAEOrC,MAAA,CAAAmB,SAAA,CAAAgC,WAAW,GAAnB;IACEC,MAAM,CAACC,oBAAoB,GAAG,IAAI,CAAChB,QAAQ,CAACO,IAAI,CAAC,IAAI,CAAC;GACvD;EAEO5C,MAAA,CAAAmB,SAAA,CAAAkB,QAAQ,GAAhB;IAAA,IAAAZ,KAAA;IACE,IAAI,CAACR,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,OAAO,GAAG,KAAK;IAEpB,IAAI,CAACF,SAAS,CAACsC,OAAO,CAAC,UAACC,EAAE;MACxBA,EAAE,CAAC9B,KAAI,CAACyB,YAAY,CAAC;KACtB,CAAC;IAEF,IAAI,CAAClC,SAAS,GAAG,EAAE;GACpB;EAEOhB,MAAA,CAAAmB,SAAA,CAAAc,OAAO,GAAf;IACE,IAAI,IAAI,CAAChB,IAAI,EAAE;MACb,IAAI,CAACoB,QAAQ,EAAE;KAChB,MAAM;MACL,IAAI,IAAI,CAACnB,OAAO,EAAE,CAEjB,KAAM;QACL,IAAI,CAACA,OAAO,GAAG,IAAI;QACnB,IAAI,CAACiC,WAAW,EAAE;QAClB,IAAI,CAACjB,SAAS,EAAE;;;GAGrB;EACH,OAAAlC,MAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module"}