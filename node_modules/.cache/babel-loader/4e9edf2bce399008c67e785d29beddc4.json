{"ast":null,"code":"import _slicedToArray from \"/home/lucifer/Projects/.sortcoder/overlay-google-map/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucifer/Projects/.sortcoder/overlay-google-map/src/App.js\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport { LoadScript, GoogleMap, MarkerClusterer, Marker, OverlayView } from \"@react-google-maps/api\";\nimport SvgComponent from \"./SvgComponent\";\nexport default function App() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    map = _useState2[0],\n    setMap = _useState2[1];\n  var canvasRef = useRef(null);\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    markers = _useState4[0],\n    setMarkers = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    imageBounds = _useState6[0],\n    setImageBounds = _useState6[1];\n  var _useState7 = useState(OverlayView.OVERLAY_MOUSE_TARGET),\n    _useState8 = _slicedToArray(_useState7, 2),\n    overlayPane = _useState8[0],\n    setOverlayPane = _useState8[1];\n  var onLoad = useCallback(function (map) {\n    setMap(map);\n    var bounds = new window.google.maps.LatLngBounds();\n    setImageBounds(bounds);\n    map.setCenter({\n      lat: 32.803356869891665,\n      lng: -97.09699318526077\n    });\n  }, []);\n  var onUnmount = useCallback(function (map) {\n    setMap(null);\n  }, []);\n\n  //Draw image\n  var showImage = function showImage() {\n    // const canvas = canvasRef.current;\n    // // canvas.width = 3313;\n    // // canvas.height = 1082;\n    // const ctx = canvas.getContext(\"2d\");\n    // let imageData = ctx.createImageData(3313, 1082);\n\n    // let data = imageData.data;\n    // for (var i = 0; i < data.length; i += 4) {\n    //   data[i] = 0;\n    //   data[i + 1] = 0;\n    //   data[i + 2] = 0;\n    //   data[i + 3] = 120;\n    // }\n    // ctx.putImageData(imageData, 0, 0);\n\n    var coords = [, {\n      lat: 32.80333864186445,\n      lng: -97.10203638995968\n    }, {\n      lat: 32.803356869891665,\n      lng: -97.09699318526077\n    }, {\n      lat: 32.80407241245076,\n      lng: -97.09561653689937\n    }, {\n      lat: 32.801204126414625,\n      lng: -97.09799214890047\n    }];\n    var bounds = new window.google.maps.LatLngBounds();\n    coords.forEach(function (coordPair) {\n      return bounds.extend(coordPair);\n    });\n    setImageBounds(bounds);\n    map.fitBounds(bounds);\n    setOverlayPane(OverlayView.OVERLAY_MOUSE_TARGET);\n  };\n\n  //Get color of each pixel on mouse move\n  var getRGBAFromPixel = function getRGBAFromPixel(e) {\n    var rect = canvasRef.current.getBoundingClientRect();\n    var pos = {\n      x: (e.clientX - rect.left) / (rect.right - rect.left) * canvasRef.current.width,\n      y: (e.clientY - rect.top) / (rect.bottom - rect.top) * canvasRef.current.height\n    };\n    var ctx = e.target.getContext(\"2d\");\n    var color = ctx.getImageData(pos.x, pos.y, 1, 1).data;\n    console.log(color);\n  };\n  var showMarkerData = function showMarkerData(marker) {\n    return console.log(marker);\n  };\n  var clearMarkers = function clearMarkers() {\n    return setMarkers([]);\n  };\n  var clearImage = function clearImage() {\n    return setImageBounds(new window.google.maps.LatLngBounds());\n  };\n  return /*#__PURE__*/React.createElement(LoadScript, {\n    googleMapsApiKey: \"AIzaSyDp8i_SiNUXrpREuWYpTXpBys9-sdYLWro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    zoom: 17,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    options: {\n      mapTypeControl: false,\n      mapTypeId: \"terrain\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: showImage,\n    style: {\n      position: \"absolute\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Show image\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearImage,\n    style: {\n      position: \"absolute\",\n      top: \"12%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Clear image\"), /*#__PURE__*/React.createElement(OverlayView, {\n    bounds: imageBounds,\n    mapPaneName: overlayPane,\n    children: /*#__PURE__*/React.createElement(SvgComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"names":["React","useCallback","useRef","useState","LoadScript","GoogleMap","MarkerClusterer","Marker","OverlayView","SvgComponent","App","_useState","_useState2","_slicedToArray","map","setMap","canvasRef","_useState3","_useState4","markers","setMarkers","_useState5","_useState6","imageBounds","setImageBounds","_useState7","OVERLAY_MOUSE_TARGET","_useState8","overlayPane","setOverlayPane","onLoad","bounds","window","google","maps","LatLngBounds","setCenter","lat","lng","onUnmount","showImage","coords","forEach","coordPair","extend","fitBounds","getRGBAFromPixel","e","rect","current","getBoundingClientRect","pos","x","clientX","left","right","width","y","clientY","top","bottom","height","ctx","target","getContext","color","getImageData","data","console","log","showMarkerData","marker","clearMarkers","clearImage","createElement","googleMapsApiKey","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","options","mapTypeControl","mapTypeId","onClick","style","position","mapPaneName","children"],"sources":["/home/lucifer/Projects/.sortcoder/overlay-google-map/src/App.js"],"sourcesContent":["import React, {useCallback, useRef, useState} from \"react\";\nimport {\n    LoadScript,\n    GoogleMap,\n    MarkerClusterer,\n    Marker,\n    OverlayView\n} from \"@react-google-maps/api\";\nimport SvgComponent from \"./SvgComponent\";\n\nexport default function App() {\n    let [map, setMap] = useState(null);\n    let canvasRef = useRef(null);\n\n    const [markers, setMarkers] = useState([]);\n\n    const [imageBounds, setImageBounds] = useState(null);\n    const [overlayPane, setOverlayPane] = useState(\n        OverlayView.OVERLAY_MOUSE_TARGET\n    );\n\n    const onLoad = useCallback((map) => {\n        setMap(map);\n\n        const bounds = new window.google.maps.LatLngBounds();\n        setImageBounds(bounds);\n\n        map.setCenter({lat: 32.803356869891665, lng: -97.09699318526077});\n    }, []);\n\n    const onUnmount = useCallback((map) => {\n        setMap(null);\n    }, []);\n\n    //Draw image\n    const showImage = () => {\n        // const canvas = canvasRef.current;\n        // // canvas.width = 3313;\n        // // canvas.height = 1082;\n        // const ctx = canvas.getContext(\"2d\");\n        // let imageData = ctx.createImageData(3313, 1082);\n\n        // let data = imageData.data;\n        // for (var i = 0; i < data.length; i += 4) {\n        //   data[i] = 0;\n        //   data[i + 1] = 0;\n        //   data[i + 2] = 0;\n        //   data[i + 3] = 120;\n        // }\n        // ctx.putImageData(imageData, 0, 0);\n\n        const coords = [\n            ,\n            {lat: 32.80333864186445, lng: -97.10203638995968},\n            {lat: 32.803356869891665, lng: -97.09699318526077},\n            {lat: 32.80407241245076, lng: -97.09561653689937},\n            {lat: 32.801204126414625, lng: -97.09799214890047}\n        ];\n        const bounds = new window.google.maps.LatLngBounds();\n        coords.forEach((coordPair) => bounds.extend(coordPair));\n        setImageBounds(bounds);\n        map.fitBounds(bounds);\n        setOverlayPane(OverlayView.OVERLAY_MOUSE_TARGET);\n    };\n\n    //Get color of each pixel on mouse move\n    const getRGBAFromPixel = (e) => {\n        var rect = canvasRef.current.getBoundingClientRect();\n        var pos = {\n            x:\n                ((e.clientX - rect.left) / (rect.right - rect.left)) *\n                canvasRef.current.width,\n            y:\n                ((e.clientY - rect.top) / (rect.bottom - rect.top)) *\n                canvasRef.current.height\n        };\n        var ctx = e.target.getContext(\"2d\");\n        var color = ctx.getImageData(pos.x, pos.y, 1, 1).data;\n        console.log(color);\n    };\n\n\n    const showMarkerData = (marker) => console.log(marker);\n    const clearMarkers = () => setMarkers([]);\n    const clearImage = () =>\n        setImageBounds(new window.google.maps.LatLngBounds());\n\n    return (\n        <LoadScript googleMapsApiKey=\"AIzaSyDp8i_SiNUXrpREuWYpTXpBys9-sdYLWro\">\n            <GoogleMap\n                mapContainerStyle={{width: \"100%\", height: \"100%\"}}\n                zoom={17}\n                onLoad={onLoad}\n                onUnmount={onUnmount}\n                options={{\n                    mapTypeControl: false,\n                    mapTypeId: \"terrain\"\n                }}\n            >\n                <button onClick={showImage} style={{position: \"absolute\"}}>\n                    Show image\n                </button>\n                <button\n                    onClick={clearImage}\n                    style={{position: \"absolute\", top: \"12%\"}}\n                >\n                    Clear image\n                </button>\n                <OverlayView\n                    bounds={imageBounds}\n                    mapPaneName={overlayPane}\n                    children={\n                        <SvgComponent />\n                    }\n                ></OverlayView>\n            </GoogleMap>\n        </LoadScript>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}